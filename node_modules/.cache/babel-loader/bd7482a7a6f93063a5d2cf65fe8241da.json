{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport formData from 'form-data';\nimport axios from \"axios\";\nexport var Comunication = /*#__PURE__*/function () {\n  function Comunication(base_path) {\n    _classCallCheck(this, Comunication);\n\n    _defineProperty(this, \"base_path\", \"\");\n\n    _defineProperty(this, \"headers\", {});\n\n    this.base_path = base_path;\n    this.headers = {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  _createClass(Comunication, [{\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(route, body) {\n        var complete_route, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                complete_route = this.base_path + route;\n                console.log(complete_route);\n                _context.next = 4;\n                return axios.post(complete_route, _objectSpread({}, body), {\n                  headers: this.headers\n                });\n\n              case 4:\n                data = _context.sent;\n                return _context.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function post(_x, _x2) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }, {\n    key: \"addFormData\",\n    value: function addFormData(_data) {\n      var data = new formData();\n\n      for (var key in _data) {\n        console.log(key, _data[key]);\n        data.append(key.toString(), _data[key]);\n\n        if (key == 'file') {\n          var reader = new FileReader();\n          reader.readAsDataURL(_data[key]);\n          data.append('file', reader);\n        }\n      }\n\n      console.log(data);\n      return data;\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(route, paramName, param) {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(this.base_path + route + \"/\".concat(paramName, \":\").concat(param), {\n                  method: 'GET',\n                  headers: this.headers\n                });\n\n              case 2:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", data);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x3, _x4, _x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"setHeaders\",\n    value: function setHeaders(headers) {\n      this.headers = {};\n\n      for (var headersKey in headers) {\n        this.headers[headersKey] = headers[headersKey];\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      this.headers.Authorization = \"<Bearer> \".concat(token);\n    }\n  }]);\n\n  return Comunication;\n}();","map":{"version":3,"names":["formData","axios","Comunication","base_path","headers","route","body","complete_route","console","log","post","data","_data","key","append","toString","reader","FileReader","readAsDataURL","paramName","param","fetch","method","headersKey","token","Authorization"],"sources":["/Users/yancarlos/Documents/my Work/front-jewel-shop/src/red/comunicationMethods.js"],"sourcesContent":["import formData from 'form-data'\nimport axios from \"axios\";\n\nexport class Comunication {\n    base_path = \"\"\n    headers = {}\n\n    constructor(base_path) {\n        this.base_path = base_path\n        this.headers = {'Content-Type': 'application/json'}\n    }\n\n    async post(route, body) {\n        const complete_route = this.base_path + route\n        console.log(complete_route)\n        const data = await axios.post(complete_route, {\n            ...body\n        }, {\n            headers: this.headers\n        })\n        return data\n    }\n\n    addFormData(_data) {\n        let data = new formData();\n        for (const key in _data) {\n            console.log(key, _data[key])\n            data.append(key.toString(), _data[key]);\n            if (key == 'file') {\n                const reader = new FileReader()\n                reader.readAsDataURL(_data[key])\n                data.append('file', reader)\n            }\n        }\n        console.log(data)\n        return data\n    }\n\n    async get(route, paramName, param) {\n        const data = await fetch(this.base_path + route + `/${paramName}:${param}`, {\n            method: 'GET',\n            headers: this.headers\n        })\n\n        return data\n    }\n\n    setHeaders(headers) {\n        this.headers = {}\n        for (const headersKey in headers) {\n            this.headers[headersKey] = headers[headersKey]\n        }\n    }\n\n    setToken(token) {\n        this.headers.Authorization = `<Bearer> ${token}`\n    }\n}\n\n"],"mappings":";;+CACA,oJ;;;;;;;;;;;;;;;;;;AADA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,WAAaC,YAAb;EAII,sBAAYC,SAAZ,EAAuB;IAAA;;IAAA,mCAHX,EAGW;;IAAA,iCAFb,EAEa;;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAe;MAAC,gBAAgB;IAAjB,CAAf;EACH;;EAPL;IAAA;IAAA;MAAA,uEASI,iBAAWC,KAAX,EAAkBC,IAAlB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACUC,cADV,GAC2B,KAAKJ,SAAL,GAAiBE,KAD5C;gBAEIG,OAAO,CAACC,GAAR,CAAYF,cAAZ;gBAFJ;gBAAA,OAGuBN,KAAK,CAACS,IAAN,CAAWH,cAAX,oBACZD,IADY,GAEhB;kBACCF,OAAO,EAAE,KAAKA;gBADf,CAFgB,CAHvB;;cAAA;gBAGUO,IAHV;gBAAA,iCAQWA,IARX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CATJ;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,OAoBI,qBAAYC,KAAZ,EAAmB;MACf,IAAID,IAAI,GAAG,IAAIX,QAAJ,EAAX;;MACA,KAAK,IAAMa,GAAX,IAAkBD,KAAlB,EAAyB;QACrBJ,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAAiBD,KAAK,CAACC,GAAD,CAAtB;QACAF,IAAI,CAACG,MAAL,CAAYD,GAAG,CAACE,QAAJ,EAAZ,EAA4BH,KAAK,CAACC,GAAD,CAAjC;;QACA,IAAIA,GAAG,IAAI,MAAX,EAAmB;UACf,IAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;UACAD,MAAM,CAACE,aAAP,CAAqBN,KAAK,CAACC,GAAD,CAA1B;UACAF,IAAI,CAACG,MAAL,CAAY,MAAZ,EAAoBE,MAApB;QACH;MACJ;;MACDR,OAAO,CAACC,GAAR,CAAYE,IAAZ;MACA,OAAOA,IAAP;IACH;EAjCL;IAAA;IAAA;MAAA,sEAmCI,kBAAUN,KAAV,EAAiBc,SAAjB,EAA4BC,KAA5B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACuBC,KAAK,CAAC,KAAKlB,SAAL,GAAiBE,KAAjB,cAA6Bc,SAA7B,cAA0CC,KAA1C,CAAD,EAAoD;kBACxEE,MAAM,EAAE,KADgE;kBAExElB,OAAO,EAAE,KAAKA;gBAF0D,CAApD,CAD5B;;cAAA;gBACUO,IADV;gBAAA,kCAMWA,IANX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAnCJ;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,OA4CI,oBAAWP,OAAX,EAAoB;MAChB,KAAKA,OAAL,GAAe,EAAf;;MACA,KAAK,IAAMmB,UAAX,IAAyBnB,OAAzB,EAAkC;QAC9B,KAAKA,OAAL,CAAamB,UAAb,IAA2BnB,OAAO,CAACmB,UAAD,CAAlC;MACH;IACJ;EAjDL;IAAA;IAAA,OAmDI,kBAASC,KAAT,EAAgB;MACZ,KAAKpB,OAAL,CAAaqB,aAAb,sBAAyCD,KAAzC;IACH;EArDL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}